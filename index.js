require('dotenv').config();
const { Bot, GrammyError, HttpError, InlineKeyboard, session } = require('grammy');
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const { logger } = require('./utils/logger');
const { updateUserData, recordUserInteraction } = require('./utils/helpers');
const bot = new Bot(process.env.BOT_API_KEY);
let suggestionClicked = {};
const fs = require('fs');

bot.use(session({
  initial: () => ({})
}));

async function createTables(db) {
  await db.exec(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    timesStarted INTEGER DEFAULT 0,
    lastSeen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS interactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    interactionTime TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS blocked_users (
    id INTEGER PRIMARY KEY
  )`);

  logger.info('Tables created or already exist');
}

async function blockUser(db, userId) {
  await db.run('INSERT INTO blocked_users (id) VALUES (?)', userId);
}

async function isUserBlocked(db, userId) {
  const user = await db.get('SELECT * FROM blocked_users WHERE id = ?', userId);
  return user !== undefined;
}

let db;
(async () => {
  const dbPath = './userData.db';

  const dbExists = fs.existsSync(dbPath);

  db = await open({
    filename: dbPath,
    driver: sqlite3.Database
  });

  if (!dbExists) {
    await createTables(db);
  }

  logger.info('Database initialized and connection established');
})();

bot.command('start', async (ctx) => {
  logger.info(`User ${ctx.from.id} started the bot`);
  await updateUserData(db, ctx.from.id);
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üëã\n–Ø –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –°–ö–†. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º suggestionClicked –≤ true
  suggestionClicked[ctx.from.id] = true;
});

let userMessages = {};

bot.on('message', async (ctx) => {
  const userId = ctx.from.id;
  const userLink = ctx.from.username ? `@${ctx.from.username}` : `${ctx.from.first_name}`;
  if (await isUserBlocked(db, userId)) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    return;
  }

  if (suggestionClicked[ctx.from.id]) {
    const adminId = process.env.ADMIN_ID; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –∏ "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    const keyboard = new InlineKeyboard()
      .text('–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', `accept:${userId}:${ctx.message.message_id}`)
      .text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', `reject:${userId}:${ctx.message.message_id}`)
      .text('–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üö´', `block:${userId}:${ctx.message.message_id}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userMessages[`${userId}:${ctx.message.message_id}`] = ctx.message;

    if(ctx.message.text){
      let text = `${ctx.message.text}\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userLink}`;
      await bot.api.sendMessage(adminId, text, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });
    } else if(ctx.message.video){
      let caption = ctx.message.caption ? `\n${ctx.message.caption}` : '';
      await bot.api.sendVideo(adminId, ctx.message.video.file_id, {
        caption: `–í–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLink}${caption}`,
        reply_markup: keyboard
      })
    } else if(ctx.message.photo){
      let caption = ctx.message.caption ? `\n${ctx.message.caption}` : '';
      await bot.api.sendPhoto(adminId, ctx.message.photo[0].file_id, {
        caption: `–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLink}${caption}`,
        reply_markup: keyboard
      })
    }

    await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
});

bot.callbackQuery(/^accept:(\d+):(\d+)$/, async (ctx) => {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  const channelId = process.env.CHANNEL_ID; // ID –∫–∞–Ω–∞–ª–∞
  const userId = parseInt(ctx.match[1]);
  const messageId = parseInt(ctx.match[2]);

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userMessage = userMessages[`${userId}:${messageId}`];

  let caption = '\n\n<a href="https://t.me/your_suggestion_bot">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–∫—É</a>\n<a href="https://t.me/your_chat">–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç</a>'; // –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏

  if(userMessage.text){
    let text = `${userMessage.text}${caption}`;
    await bot.api.sendMessage(channelId, text, { 
      parse_mode: 'HTML' 
    });
  } else if(userMessage.video){
    let videoCaption = userMessage.caption ? `${userMessage.caption}${caption}` : caption;
    await bot.api.sendVideo(channelId, userMessage.video.file_id, {
      caption: videoCaption,
      parse_mode: 'HTML'
    })
  } else if(userMessage.photo){
    let photoCaption = userMessage.caption ? `${userMessage.caption}${caption}` : caption;
    await bot.api.sendPhoto(channelId, userMessage.photo[0].file_id, {
      caption: photoCaption,
      parse_mode: 'HTML'
    })
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  await ctx.answerCallbackQuery({ text: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.' });

  // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete userMessages[`${userId}:${messageId}`];
})

bot.callbackQuery(/^reject:(\d+):(\d+)$/, async (ctx) => {
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  await ctx.answerCallbackQuery({ text: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.' });

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞
  await bot.api.deleteMessage(ctx.callbackQuery.message.chat.id, ctx.callbackQuery.message.message_id);
});

bot.callbackQuery(/^block:(\d+)$/, async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  await blockUser(db, userId);
  await ctx.answerCallbackQuery({ text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.' });
});

bot.start();
